/*----------------------------------------------------------------
// Copyright (C) MickelZhang
// License:MIT
// 文件名：about_class.cpp
// 文件功能描述：菜鸟教程类，面向对象
// 创建者：MickelZhang
// 时间：2020/12/17
// 修改人：
// 时间：
// 修改说明：
// 软件版本：VS2015
//----------------------------------------------------------------*/

/*
类定义是以关键字 class 开头，后跟类的名称。类的主体是包含在一对花括号中。
类定义后必须跟着一个分号或一个声明列表。
类的成员函数：类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。
             类成员函数是类的一个成员，它可以操作类的任意对象，可以访问对象中的所有成员。
             成员函数可以定义在类定义内部，或者单独使用范围解析运算符 :: 来定义。在类定义中定义的成员函数把函数声明为内联的，
             即便没有使用 inline 标识符
             使用范围解析运算符 ::定义函数
类访问修饰符：数据封装是面向对象编程的一个重要特点，它防止函数直接访问类类型的内部成员。
             类成员的访问限制是通过在类主体内部对各个区域标记 public、private、protected 来指定的。
             关键字 public、private、protected 称为访问修饰符。
             公有成员在程序中类的外部是可访问的
             私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。
             默认情况下，类的所有成员都是私有的，（没有private时候，也是私有的，默认私有）
             protected（受保护）成员变量或函数与私有成员十分相似，但有一点不同，
             protected（受保护）成员在派生类（即子类）中是可访问的。
             继承方式：
             1.public 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private
             2.protected 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private
             3.private 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private
             4.private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；
             5.protected 成员可以被派生类访问。
构造函数：类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。
                  构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，
                  也不会返回 void。构造函数可用于为某些成员变量设置初始值。
                  可定义不带参数和带参数的构造函数 默认的构造函数没有任何参数，但如果需要，构造函数也可以带有参数。
                  这样在创建对象时就会给对象赋初始值
                  构造函数可以使用初始化列表来初始化字段
析构函数：类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。                  
         析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，
         也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。

C++拷贝构造函数：是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象
                通过使用另一个同类型的对象来初始化新创建的对象。
                复制对象把它作为参数传递给函数。
                复制对象，并从函数返回这个对象。
                如果在类中没有定义拷贝构造函数，编译器会自行定义一个。如果类带有指针变量，
                并有动态内存分配，则它必须有一个拷贝构造函数。
                形式：
                classname (const classname &obj) {
                   // 构造函数的主体
                }

C++友元函数：
C++内联函数：
C++中this指针：
C++中指向类的指针：
C++类的静态成员：

*/

/*-----------------------------------------------------------------
// 功能描述：创建一个Box的类
// 用法：（也可以举例添加详细的使用方法，或者尽可能描述清楚）
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：MickelZhang 2020/12/12
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
class Box
{
 /*
 用法：
 Box box1; //实例化对象
 Box box2; //实例化对象
 double volume = 0.0;     // 用于存储体积
 Box1.height = 5.0;  // 通过. 来访问数据和方法
 Box1.length = 6.0; 
 Box1.breadth = 7.0;
 volume = Box1.height * Box1.length * Box1.breadth;
 cout << "Box1 的体积：" << volume <<endl;
 
 Box3.set(16.0, 8.0, 12.0); 
 volume = Box3.get(); 
 cout << "Box3 的体积：" << volume <<endl; 
 */
  public:
    double length; //盒子的长度
    double breadth; //盒子的宽度
    double height; //盒子的高度
    double get(void); // 成员函数声明
    void set(double len, double bre,double hei); // 成员函数声明
  private:
    double perimeter; //私有变量 周长
  protected:
    double area; // 受保护成员 面积
};

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：类中成员函数的定义部分，求体积
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
double Box::get(void)
{
    return length * breadth * height;
}
 
/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：类中成员函数的定义部分，对长宽高的赋值设置
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void Box::set( double len, double bre, double hei)
{
    length = len;
    breadth = bre;
    height = hei;
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：测试Box类，使用方法等
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void TestForBoxClass()
{
 Box box1; //实例化对象
 Box box2; //实例化对象
 double volume = 0.0;     // 用于存储体积
 Box1.height = 5.0;  // 通过. 来访问数据和方法
 Box1.length = 6.0; 
 Box1.breadth = 7.0;
 volume = Box1.height * Box1.length * Box1.breadth;
 cout << "Box1 的体积：" << volume <<endl;
 
 Box3.set(16.0, 8.0, 12.0); 
 volume = Box3.get(); 
 cout << "Box3 的体积：" << volume <<endl; 
}

/*-----------------------------------------------------------------
// 功能描述：创建一个Line的类
// 用法：（也可以举例添加详细的使用方法，或者尽可能描述清楚）
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：MickelZhang 2020/12/18
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
class Line
{
   public:
      double getLength( void );
      Line();  // 这是构造函数声明
      ~Line();  // 这是析构函数声明
      void setlength(double len) //也可在类的内部进行函数的定义
      {
        length = len;
      }
 
   private:
      double length;
};

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：构造函数的定义
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
Line::Line(void)
{
  cout << "Object is being created" << endl;
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：析构函数的定义
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
Line::~Line(void)
{
    cout << "Object is being deleted" << endl;
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：成员函数的定义
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
double Line::getLength( void )
{
    return length;
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：测试Line类,构造函数和析构函数
// 作者：MickelZhang
// 日期：2020/12/18
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void TestForLineClass()
{
   Line line;
   // 设置长度
   line.setLength(6.0); 
   cout << "Length of line : " << line.getLength() <<endl;
}
