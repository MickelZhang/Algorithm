/*----------------------------------------------------------------
// Copyright (C) MickelZhang
// License:MIT
// 文件名：pointer.cpp
// 文件功能描述：
// 创建者：MickelZhang
// 时间：2020/12/16
// 修改人：
// 时间：
// 修改说明：B站中郝斌的C语言指针教程一定要看一下
// 软件版本：VS2015
//----------------------------------------------------------------*/

/*
什么是指针：
          指针是一个变量，其值为另一个变量的地址，即内存地址，就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明
          int    *ip;    /* 一个整型的指针 */
          double *dp;    /* 一个 double 型的指针 */
          float  *fp;    /* 一个浮点型的指针 */
          char   *ch;    /* 一个字符型的指针 */
          所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
          不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
Null指针：在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。
          int  *ptr = NULL;
          cout << "ptr 的值是 " << ptr ; // 零 在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。
          然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。
          但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。
指针的算术运算：指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、--、+、-。
               递减一个指针
               递增一个指针
               指针的比较
指针VS数组：指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。
           例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组
指针数组：
指向指针的指针：是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。
               当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。
传递指针给函数：
从函数返回指针：

*/


/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：测试指针的一些代码
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointForTest()
{
   int  var = 20;   // 实际变量的声明
   int  *ip;        // 指针变量的声明
 
   ip = &var;       // 在指针变量中存储 var 的地址
 
   cout << "Value of var variable: ";
   cout << var << endl;
 
   // 输出在指针变量中存储的地址
   cout << "Address stored in ip variable: ";
   cout << ip << endl;
 
   // 访问指针中地址的值
   cout << "Value of *ip variable: ";
   cout << *ip << endl;
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：递增指针对于数组的测试
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointerIncreaseForArrayTest()
{   
    int MAX = 3;
    int  var[MAX] = {10, 100, 200};
   int  *ptr;
 
   // 指针中的数组地址
   ptr = var;
   for (int i = 0; i < MAX; i++)
   {
      cout << "Address of var[" << i << "] = ";
      cout << ptr << endl;
 
      cout << "Value of var[" << i << "] = ";
      cout << *ptr << endl;
 
      // 移动到下一个位置
      ptr++;
   }

}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：递增指针对于数组的测试
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointerCompare()
{
   int  var[MAX] = {10, 100, 200};
   int  *ptr;
 
   // 指针中第一个元素的地址
   ptr = var;
   int i = 0;
   while ( ptr <= &var[MAX - 1] )
   {
      int MAX = 3;
      cout << "Address of var[" << i << "] = ";
      cout << ptr << endl;
 
      cout << "Value of var[" << i << "] = ";
      cout << *ptr << endl;
 
      // 指向上一个位置
      ptr++;
      i++;
   }
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：指针和数组的关于  VS
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointerVsArray()
{
int MAX = 3;
  int  var[MAX] = {10, 100, 200};
   int  *ptr;
 
   // 指针中的数组地址
   ptr = var;
   for (int i = 0; i < MAX; i++)
   {
      cout << "var[" << i << "]的内存地址为 ";
      cout << ptr << endl;
 
      cout << "var[" << i << "] 的值为 ";
      cout << *ptr << endl;
      
      *var = i; //正确
      // var++; // 错误的。把指针运算符 * 应用到 var 上是完全可以的，但修改 var 的值是非法的，这是因为 var 是一个指向数组开头的常量，不能作为左值。
                // 由于一个数组名对应一个指针常量，只要不改变数组的值,仍然可以用指针形式的表达式
      *(var + 2) = 500; //正确
      // 移动到下一个位置
      ptr++;
   }

}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：指针数组
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointerArray1()
{
    int MAX = 3;
   int  var[MAX] = {10, 100, 200};
   int *ptr[MAX];
 
   for (int i = 0; i < MAX; i++)
   {
      ptr[i] = &var[i]; // 赋值为整数的地址
   }
   for (int i = 0; i < MAX; i++)
   {
      cout << "Value of var[" << i << "] = ";
      cout << *ptr[i] << endl;
   }
}

void PointerArray2()
{
 int MAX = 4;
 const char *names[MAX] = {
                   "Zara Ali",
                   "Hina Ali",
                   "Nuha Ali",
                   "Sara Ali",
   };
 
   for (int i = 0; i < MAX; i++)
   {
      cout << "Value of names[" << i << "] = ";
      cout << names[i] << endl;
   }
}

/*-----------------------------------------------------------------
// 输入：
// 输出：
// 功能描述：指向指针的指针
// 作者：MickelZhang
// 日期：2020/12/16
// 修改人：
// 记录：
// 修改人：
// 记录：
// 版本：
-----------------------------------------------------------------*/
void PointToPointerOfPointer()
{
    int  var;
    int  *ptr;
    int  **pptr;
 
    var = 3000;
 
    // 获取 var 的地址
    ptr = &var;
 
    // 使用运算符 & 获取 ptr 的地址
    pptr = &ptr;
 
    // 使用 pptr 获取值
    cout << "var 值为 :" << var << endl;
    cout << "*ptr 值为:" << *ptr << endl;
    cout << "**pptr 值为:" << **pptr << endl;
}

