大话数据结构
1.数据结构绪论
2.算法
3.线性表：零个或多个数据元素的有限序列
key points:序列（有顺序），有限个（线性表元素的个数n,n>=0定义为线性表的长度，当n=0时称为空表），相同类型。
操作方法：创建，初始，置空，访问，查找，获得长度。
线性表AB的并集：循环B中元素判断当前元素是否在A中，若不存在则插入到A中
线性表顺序存储定义：用一段地址连续的存储单元一次存储线性的数据元素。（可以使用一维数组实现顺序存储结构）
数组长度和线性表长度的区别：数组长度一般是不变的（高级语言的动态数组是可变的），线性表有增删改查长度是可变的。所有线性表的长度应该是小于等于数组的长度。

顺序存储结构的三个属性：
存储空间的起始位置
线性表的最大存储容量
线性表当前的长度

存储器中的每个存储单元都有自己的编号，这个编号称为地址。
存取性能（访问）：O（1）
插入算法的思路：
1.插入位置不合理，抛出异常
2.如果线性表的长度大于等于数组长度，则抛出异常或者动态增加容量
3.如果最后个元素开始向前遍历到第i个位.别将他们都向后移动一个位置（倒叙遍历元素去实现元素的向后移动）
4.插入元素位置填入 I位置
5.表长加1

删除算法：
如果删除位置不合理，抛出异常
去除删除元素
从删除位置开始遍历到最后一个元素位置，分别将他们都向前移动一个位置
表长度减一

插入和删除的平均时间复杂度都是O(n),存和读数据的时候时间复杂度为O（1）

线性表的优点和缺点：
无须为表示表中元素之间的逻辑关系而增加额外的存储空间
可以快速地存取表中任一位置的元素
插入和删除操作需要移动大量元素
当线性表长度变化较大时，难以确定存储空间的容量
造成存储空间的碎片

链式存储结构：
（达芬奇密码）
用一组任一的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的，这意味着这些数据元素可以纯在内存未被占用的任意位置。
所以链式结构中除了要存储数据元素信息外，还要存储它的后继元素的地址
我们把数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域，指针域中存储的信息称为指针或链，这两部分信息组成数据元素的存储映像，称为节点（note）

单链表：n个节点链结成一个链表。即线性表的链式存储结构，因此链表的每个节点中只包含一个指针域，
单链表是通过每个节点的指针域将线性表的数据元素按照其逻辑次序链接在一起
链表中第一个结点的存储位置叫做头指针，
线性链表的最后一个结点指针为空（NULL）
有时候，会在单链表的第一个结点前附设一个结点名称为头结点，头结点的数据域可以不用存储任何信息，头结点的指针域指向第一个结点的指针

头指针和头结点的区别：
头指针是指链表指向第一个结点的指针，若链表有头结点，则指向头结点的指针，
头指针具有表示作用，所以常用头指针冠以链表的名字。
无论链表是否为空，头指针均不为空，头指针是链表的必要元素
头结点是为了操作的统一和方便设置的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）
有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了
头结点不一定是链表必须要素










